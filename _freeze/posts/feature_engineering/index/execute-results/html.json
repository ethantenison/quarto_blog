{
  "hash": "69b15e6f679628bfaaa5a3eb23209ffb",
  "result": {
    "markdown": "---\ntitle: \"Feature Engineering\"\nauthor: \"Ethan Tenison\"\ndate: \"4/26/2022\"\ncategories: [feature engineering, analysis]\nimage: \"image.jpg\"\n---\n\n\n\nImproving ML models after they're already been built is fun and can lead to some immediate gratification. You might tweak the hyper parameters and cross validation to improve the generalizability of your model. You may switch out the algorithm itself. Lets say you move from using neural nets to gradient boosted trees to see if you can move the accuracy score even close to 99%. At a certain point though you won't be able to improve your model without over fitting. Often times, you need to take a step back and look at the raw data itself to see if new variables can be created from the old that lead to improvements. This is what's called feature engineering\n\n**Feature Engineering** is the process of selecting, manipulating, and transforming your data into features, or variables, that are useful for machine learning. Whereas data cleaning is generally the process of subtracting irrelevant data, feature engineering is a process of addition, adding more relevant information to your data set.\n\n# Simplification\n\nSimplification is a major part of feature engineering. Combining two or more variables can increase the speed and accuracy of our model. Just to conceptualize what that would look like, I've pulled data from the [Ames Housing](https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques/) data set on Kaggle. It includes a variable for square footage and final sales prices.\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> id </th>\n   <th style=\"text-align:right;\"> sq_ft </th>\n   <th style=\"text-align:right;\"> sale_price </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1710 </td>\n   <td style=\"text-align:right;\"> 208500 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 1262 </td>\n   <td style=\"text-align:right;\"> 181500 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;\"> 1786 </td>\n   <td style=\"text-align:right;\"> 223500 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 1717 </td>\n   <td style=\"text-align:right;\"> 140000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 2198 </td>\n   <td style=\"text-align:right;\"> 250000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:right;\"> 1362 </td>\n   <td style=\"text-align:right;\"> 143000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 7 </td>\n   <td style=\"text-align:right;\"> 1694 </td>\n   <td style=\"text-align:right;\"> 307000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:right;\"> 2090 </td>\n   <td style=\"text-align:right;\"> 200000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 9 </td>\n   <td style=\"text-align:right;\"> 1774 </td>\n   <td style=\"text-align:right;\"> 129900 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> 1077 </td>\n   <td style=\"text-align:right;\"> 118000 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/plot_sale-1.png){width=672}\n:::\n:::\n\nIf we were in the neighborhood looking to buy a house, it would not be prudent to only consider the listing price. We would want to know how much we're paying for each square foot. This sounds so simple, but feature engineering in this case involves just dividing sales price by square feet to identify the cheapest house.\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> id </th>\n   <th style=\"text-align:right;\"> sq_ft </th>\n   <th style=\"text-align:right;\"> sale_price </th>\n   <th style=\"text-align:right;\"> cost_sqft </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;font-weight: bold;color: black !important;background-color: yellow !important;\"> 1299 </td>\n   <td style=\"text-align:right;font-weight: bold;color: black !important;background-color: yellow !important;\"> 5642 </td>\n   <td style=\"text-align:right;font-weight: bold;color: black !important;background-color: yellow !important;\"> 160000 </td>\n   <td style=\"text-align:right;font-weight: bold;color: black !important;background-color: yellow !important;\"> 28.35874 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 31 </td>\n   <td style=\"text-align:right;\"> 1317 </td>\n   <td style=\"text-align:right;\"> 40000 </td>\n   <td style=\"text-align:right;\"> 30.37206 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1063 </td>\n   <td style=\"text-align:right;\"> 2337 </td>\n   <td style=\"text-align:right;\"> 90000 </td>\n   <td style=\"text-align:right;\"> 38.51091 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 969 </td>\n   <td style=\"text-align:right;\"> 968 </td>\n   <td style=\"text-align:right;\"> 37900 </td>\n   <td style=\"text-align:right;\"> 39.15289 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 524 </td>\n   <td style=\"text-align:right;\"> 4676 </td>\n   <td style=\"text-align:right;\"> 184750 </td>\n   <td style=\"text-align:right;\"> 39.51027 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1293 </td>\n   <td style=\"text-align:right;\"> 2372 </td>\n   <td style=\"text-align:right;\"> 107500 </td>\n   <td style=\"text-align:right;\"> 45.32040 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 199 </td>\n   <td style=\"text-align:right;\"> 2229 </td>\n   <td style=\"text-align:right;\"> 104000 </td>\n   <td style=\"text-align:right;\"> 46.65769 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 411 </td>\n   <td style=\"text-align:right;\"> 1276 </td>\n   <td style=\"text-align:right;\"> 60000 </td>\n   <td style=\"text-align:right;\"> 47.02194 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 496 </td>\n   <td style=\"text-align:right;\"> 720 </td>\n   <td style=\"text-align:right;\"> 34900 </td>\n   <td style=\"text-align:right;\"> 48.47222 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 677 </td>\n   <td style=\"text-align:right;\"> 1774 </td>\n   <td style=\"text-align:right;\"> 87000 </td>\n   <td style=\"text-align:right;\"> 49.04171 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 810 </td>\n   <td style=\"text-align:right;\"> 2138 </td>\n   <td style=\"text-align:right;\"> 106000 </td>\n   <td style=\"text-align:right;\"> 49.57905 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 706 </td>\n   <td style=\"text-align:right;\"> 1092 </td>\n   <td style=\"text-align:right;\"> 55000 </td>\n   <td style=\"text-align:right;\"> 50.36630 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1350 </td>\n   <td style=\"text-align:right;\"> 2358 </td>\n   <td style=\"text-align:right;\"> 122000 </td>\n   <td style=\"text-align:right;\"> 51.73876 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 884 </td>\n   <td style=\"text-align:right;\"> 2230 </td>\n   <td style=\"text-align:right;\"> 118500 </td>\n   <td style=\"text-align:right;\"> 53.13901 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1133 </td>\n   <td style=\"text-align:right;\"> 2210 </td>\n   <td style=\"text-align:right;\"> 117500 </td>\n   <td style=\"text-align:right;\"> 53.16742 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1417 </td>\n   <td style=\"text-align:right;\"> 2290 </td>\n   <td style=\"text-align:right;\"> 122500 </td>\n   <td style=\"text-align:right;\"> 53.49345 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 813 </td>\n   <td style=\"text-align:right;\"> 1044 </td>\n   <td style=\"text-align:right;\"> 55993 </td>\n   <td style=\"text-align:right;\"> 53.63314 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1388 </td>\n   <td style=\"text-align:right;\"> 2526 </td>\n   <td style=\"text-align:right;\"> 136000 </td>\n   <td style=\"text-align:right;\"> 53.84006 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 667 </td>\n   <td style=\"text-align:right;\"> 2380 </td>\n   <td style=\"text-align:right;\"> 129000 </td>\n   <td style=\"text-align:right;\"> 54.20168 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 243 </td>\n   <td style=\"text-align:right;\"> 1440 </td>\n   <td style=\"text-align:right;\"> 79000 </td>\n   <td style=\"text-align:right;\"> 54.86111 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/cost_sqft plot-1.png){width=672}\n:::\n:::\n\nBased on our transformation, our distribution is almost perfectly normal.\n\n\n\n# Random Forest\n\nIn terms of ML feature learning is all about more accurately representing the relationship between your features.The [kaggle tutorial](https://www.kaggle.com/code/ryanholbrook/what-is-feature-engineering) on feature engineering has been really helpful understanding this through code.\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import cross_val_score\n\names = r.ames2\nX = ames.iloc[:,:-1]\ny = ames.iloc[:,-1]\n\n# Train and score baseline model\nbaseline = RandomForestRegressor(criterion=\"absolute_error\", random_state=0)\nbaseline_score = cross_val_score(\n    baseline, X, y, cv=5, scoring=\"neg_mean_absolute_error\",\n    error_score='raise'\n)\nbaseline_score = -1 * baseline_score.mean()\n\nprint(f\"MAE Baseline Score: {baseline_score:.4}\")\n```\n\n::: {.cell-output-stdout}\n```\nMAE Baseline Score: 11.4\n```\n:::\n:::\n\nLooking at just the numeric variables, the MAE is not that bad. There are several variables that could be adjusted, added, or transformed to make them more useful. For example, there are variables for year built and year remodeled. By itself, year remodeled is odd in that new homes have year built as their remodeled year, and some older homes have decades between when they were built and when they were remodeled. Therefore, it might be better just to use the difference between year built and remodeled instead of just the remodeled year. Additionally, there are two variables for bedroom and total rooms, so we know they are already going to be highly correlated with each other. It might be more meaningful from a cost perspective to show the ratio of total rooms to bedrooms to avoid any duplication\n\n::: {.cell}\n::: {.cell-output-stdout}\n```\nMAE Updated Baseline Score: 11.38\n```\n:::\n:::\n\nCreating these new variables only slightly improved the model. Oh well!\n\n# Mutual Information\n\nOne of the common ways to gain an initial understanding of your data is to measure how different variables are correlated with each other, or rather how two variables are linearly related. This can be done with a correlation matrix of your dataset fairly easily, but what do you do when a non-linear relationship exist? This is where mutual information comes in.\n\n**Mutual Information** is a measure that tells us how much one random variable tells us about another. \\[\\^1\\]\n\n\\[\\^1\\]: Latham, P. E. (2009, January 21). *Mutual information - Scholarpedia*. Scholarpedia. Retrieved May 22, 2022, from http://www.scholarpedia.org/article/Mutual_information\\]",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}